(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>p});var r=t(537),i=t.n(r),a=t(645),o=t.n(a),c=t(667),s=t.n(c),d=new URL(t(829),t.b),A=o()(i()),l=s()(d);A.push([e.id,`:root {\n    --text-sizes: calc((2vh + 1.5vw)/2);\n}\n\nbody {\n    background: url(${l});\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-position: center;\n    animation: fadeIn 1.5s;\n}\n\n#content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    min-height: 98vh;\n    gap: 15px;\n}\n\nheader {\n    font-size: 4rem;\n    color: antiquewhite;\n    padding: 2rem;\n    text-align: center;\n}\n\n#navbar {\n    display: flex;\n    color: antiquewhite;\n    font-size: 2rem;\n    display: flex;\n    gap: 1rem;\n    flex-wrap: wrap;\n    justify-content: center;\n}\n\n#navbar > div {\n    padding: 0.5rem 1rem;\n    background-color: rgba(0, 0, 0, 0.7);\n    box-shadow: 0 0 5px 2px rgba(0, 0, 0, 0.7);\n    border-radius: 30px;\n}\n\n#navbar > div:hover {\n    cursor: pointer;\n    transition: 0.5s;\n    transform: scale(1.05);\n}\n\n#navbar > div:active {\n    transition: 0.2s;\n    transform: scale(0.95);\n}\n\n.description {\n    min-height: 60vh;\n    width: 50vw;\n    background-color: rgba(0, 0, 0, 0.7);\n    border-radius: 20px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    color: antiquewhite;\n    box-shadow: 0 0 5px 2px rgba(0, 0, 0, 0.7);\n    backdrop-filter: blur(2px);\n    /* animation: fadeIn 1.5s; */\n}\n\n.description > p {\n    padding: 2rem 1rem;\n    text-align: center;\n    line-height: calc(1.8 * var(--text-sizes));\n    font-size: var(--text-sizes);\n}\n\n.description > h1 {\n    font-size: calc(1.4 * var(--text-sizes));\n}\n\n.description > h2 {\n    font-size: var(--text-sizes);\n}\n\n.description > ul {\n    list-style: none;\n}\n\n.description li {\n    padding-top: 10px;\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    border-bottom: 1px dotted antiquewhite;\n}\n\n.description li::before {\n    content: counter(list-item, decimal);\n    counter-increment: list-item;\n    margin-right: 10px;\n  }\n\n.description ol {\n    width: 50%;\n    margin-left: -40px;\n}\n\n.food {\n    padding-top: 30px;\n    border-bottom: 2px dotted antiquewhite;\n    font-size: var(--text-sizes);\n}\n\n.description span {\n    font-size: calc(var(--text-sizes) * 0.7);\n}\n\nfooter {\n    padding: 20px;\n    align-self: center;\n    flex-wrap: wrap;\n}\n\n@keyframes fadeIn {\n    0% {\n      opacity: 0;\n    }\n  \n    100% {\n      opacity: 1;\n    }\n  }`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,mCAAmC;AACvC;;AAEA;IACI,mDAAmC;IACnC,sBAAsB;IACtB,4BAA4B;IAC5B,4BAA4B;IAC5B,2BAA2B;IAC3B,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,8BAA8B;IAC9B,gBAAgB;IAChB,SAAS;AACb;;AAEA;IACI,eAAe;IACf,mBAAmB;IACnB,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,eAAe;IACf,aAAa;IACb,SAAS;IACT,eAAe;IACf,uBAAuB;AAC3B;;AAEA;IACI,oBAAoB;IACpB,oCAAoC;IACpC,0CAA0C;IAC1C,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,gBAAgB;IAChB,WAAW;IACX,oCAAoC;IACpC,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;IACnB,mBAAmB;IACnB,0CAA0C;IAC1C,0BAA0B;IAC1B,4BAA4B;AAChC;;AAEA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,0CAA0C;IAC1C,4BAA4B;AAChC;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;IACjB,aAAa;IACb,oCAAoC;IACpC,sCAAsC;AAC1C;;AAEA;IACI,oCAAoC;IACpC,4BAA4B;IAC5B,kBAAkB;EACpB;;AAEF;IACI,UAAU;IACV,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,sCAAsC;IACtC,4BAA4B;AAChC;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,aAAa;IACb,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI;MACE,UAAU;IACZ;;IAEA;MACE,UAAU;IACZ;EACF",sourcesContent:[":root {\n    --text-sizes: calc((2vh + 1.5vw)/2);\n}\n\nbody {\n    background: url('./restaurant.jpg');\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-position: center;\n    animation: fadeIn 1.5s;\n}\n\n#content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    min-height: 98vh;\n    gap: 15px;\n}\n\nheader {\n    font-size: 4rem;\n    color: antiquewhite;\n    padding: 2rem;\n    text-align: center;\n}\n\n#navbar {\n    display: flex;\n    color: antiquewhite;\n    font-size: 2rem;\n    display: flex;\n    gap: 1rem;\n    flex-wrap: wrap;\n    justify-content: center;\n}\n\n#navbar > div {\n    padding: 0.5rem 1rem;\n    background-color: rgba(0, 0, 0, 0.7);\n    box-shadow: 0 0 5px 2px rgba(0, 0, 0, 0.7);\n    border-radius: 30px;\n}\n\n#navbar > div:hover {\n    cursor: pointer;\n    transition: 0.5s;\n    transform: scale(1.05);\n}\n\n#navbar > div:active {\n    transition: 0.2s;\n    transform: scale(0.95);\n}\n\n.description {\n    min-height: 60vh;\n    width: 50vw;\n    background-color: rgba(0, 0, 0, 0.7);\n    border-radius: 20px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    color: antiquewhite;\n    box-shadow: 0 0 5px 2px rgba(0, 0, 0, 0.7);\n    backdrop-filter: blur(2px);\n    /* animation: fadeIn 1.5s; */\n}\n\n.description > p {\n    padding: 2rem 1rem;\n    text-align: center;\n    line-height: calc(1.8 * var(--text-sizes));\n    font-size: var(--text-sizes);\n}\n\n.description > h1 {\n    font-size: calc(1.4 * var(--text-sizes));\n}\n\n.description > h2 {\n    font-size: var(--text-sizes);\n}\n\n.description > ul {\n    list-style: none;\n}\n\n.description li {\n    padding-top: 10px;\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    border-bottom: 1px dotted antiquewhite;\n}\n\n.description li::before {\n    content: counter(list-item, decimal);\n    counter-increment: list-item;\n    margin-right: 10px;\n  }\n\n.description ol {\n    width: 50%;\n    margin-left: -40px;\n}\n\n.food {\n    padding-top: 30px;\n    border-bottom: 2px dotted antiquewhite;\n    font-size: var(--text-sizes);\n}\n\n.description span {\n    font-size: calc(var(--text-sizes) * 0.7);\n}\n\nfooter {\n    padding: 20px;\n    align-self: center;\n    flex-wrap: wrap;\n}\n\n@keyframes fadeIn {\n    0% {\n      opacity: 0;\n    }\n  \n    100% {\n      opacity: 1;\n    }\n  }"],sourceRoot:""}]);const p=A},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,i,a){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(o[s]=!0)}for(var d=0;d<e.length;d++){var A=[].concat(e[d]);r&&o[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),i&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=i):A[4]="".concat(i)),n.push(A))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},o=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],A=a[d]||0,l="".concat(d," ").concat(A);a[d]=A+1;var p=t(l),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var m=i(u,r);r.byIndex=c,n.splice(c,0,{identifier:l,updater:m,references:1})}o.push(l)}return o}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var a=r(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<a.length;o++){var c=t(a[o]);n[c].references--}for(var s=r(e,i),d=0;d<a.length;d++){var A=t(a[d]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},829:(e,n,t)=>{e.exports=t.p+"300366ea3036a61ebee2.jpg"}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&!e;)e=r[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),i=t.n(r),a=t(569),o=t.n(a),c=t(565),s=t.n(c),d=t(216),A=t.n(d),l=t(589),p=t.n(l),u=t(426),m={};m.styleTagTransform=p(),m.setAttributes=s(),m.insert=o().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=A(),n()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;const f=function(){!function(){let e=document.querySelector(".description");for(;e.firstChild;)e.removeChild(e.firstChild)}();const e=document.querySelector(".description"),n=document.createElement("h1"),t=document.createElement("p"),r=document.createElement("h2"),i=document.createElement("em");n.innerText="Welcome!",t.innerText="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",i.innerText="Bon Appétit",r.appendChild(i),e.append(n,t,r)},C=function(){!function(){let e=document.querySelector(".description");for(;e.firstChild;)e.removeChild(e.firstChild)}();const e={Drinks:["Mojito","Old Fashioned","Piña Colada","Strawberry Daiquiri","Espresso Martini","Sangria","Virgin Mojito","Shirley Temple","Virgin Piña Colada","Fruit Punch","Coffee","Tea","Lemonade","Iced Tea","Soda","Water"],Dishes:["Spicy Thai Basil Chicken","Creamy Garlic Parmesan Pasta","Mango Salsa Salmon","Vegetable Stir-Fry with Tofu","Hawaiian Pineapple Pizza","Beef and Broccoli Stir-Fry","Greek Salad with Feta and Olives","Butter Chicken Curry","Caprese Salad with Balsamic Glaze","Teriyaki Glazed Salmon","Lemon Herb Roasted Chicken","Shrimp Scampi with Linguine","Mexican Street Tacos","Spinach and Mushroom Quiche","BBQ Pulled Pork Sandwich","Baked Ziti with Italian Sausage","Eggplant Parmesan","Sesame Ginger Noodles","Cajun Jambalaya","Beef and Black Bean Stir-Fry"],Desserts:["Chocolate Lava Cake","Strawberry Cheesecake","Apple Pie with Vanilla Ice Cream","Tiramisu","Triple Chocolate Brownies","Key Lime Pie","Peach Cobbler","Raspberry Sorbet","Caramel Flan","Banana Split Sundae","Red Velvet Cupcakes"]},n=document.querySelector(".description");for(let t in e){const r=document.createElement("div"),i=document.createElement("ol");r.classList.add("food",`${t.toLowerCase()}`),r.innerText=t,n.append(r),e[t].forEach((e=>{const n=document.createElement("li"),r=document.createElement("span");r.innerText=e;const a=document.createElement("span");var o;a.innerText=`${o=t,"Drinks"===o?Math.floor(9*Math.random()+2):"Dishes"===o?Math.floor(26*Math.random()+35):"Desserts"===o?Math.floor(16*Math.random()+15):void 0}`,n.appendChild(r),n.appendChild(a),i.appendChild(n)})),n.append(i)}},h=function(){!function(){let e=document.querySelector(".description");for(;e.firstChild;)e.removeChild(e.firstChild)}();const e=document.querySelector(".description"),n=document.createElement("h1"),t=document.createElement("p"),r=document.createElement("p");n.innerText="Contacts",r.innerText="Planet Earth, 420 69",t.innerText="Phone: +69 486 52 486 42",e.append(n,r,t)};t(829);const B=document.getElementById("content");!function(){const e=document.createElement("div"),n=document.createElement("header"),t=document.createElement("div"),r=document.createElement("div"),i=document.createElement("div"),a=document.createElement("div"),o=document.createElement("footer"),c=document.createElement("a"),s=document.createElement("a");t.setAttribute("id","navbar"),r.setAttribute("id","home"),i.setAttribute("id","menu"),a.setAttribute("id","contact"),e.setAttribute("class","description"),n.innerText="Under the Pipes",r.innerText="Home",i.innerText="Menu",a.innerText="Contact",c.innerText="Nick Karvounis",c.href="https://unsplash.com/@nickkarvounis",s.innerText="Unsplash",s.href="https://unsplash.com/photos/rectangular-beige-wooden-tables-and-chair-Ciqxn7FE4vE",o.append("Photo by ",c," on ",s),t.append(r,i,a),B.append(n,t,e,o),f(),r.addEventListener("click",f),i.addEventListener("click",C),a.addEventListener("click",h)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,